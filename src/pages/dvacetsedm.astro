---
// src/pages/index.astro
import Layout from '../layouts/Layout.astro';
import BusDeparture from '../components/BusDeparture.astro'; // Still needed for structure reference, though rendered client-side now
import WeatherCard from '../components/WeatherCard.astro'; // Structure reference
import WindCard from '../components/WindCard.astro';     // Structure reference
import UvCard from '../components/UvCard.astro';       // Structure reference
import SunTimeCard from '../components/SunTimeCard.astro';   // Structure reference

const settingsKey = 'goGlanceSettings'; // Define localStorage key

---

<Layout title="GoGlance Hub">
  <main class="dashboard">

    {/* Settings Prompt Error Message */}
    <div id="settings-prompt" style="display: none; background-color: #ffc107; color: #333; padding: 1rem; border-radius: 8px; text-align: center; margin: 2rem auto; max-width: 600px; grid-column: 1 / -1;">
      <h2>Nastavení Chybí</h2>
      <p>Pro zobrazení dat zadejte prosím vaši polohu a API klíče v nastavení.</p>
      <a href="/goglance/settings" style="color: #007bff; text-decoration: underline; font-weight: bold;">Přejít do Nastavení</a>
    </div>

    {/* General Info & Current Weather */}
    <div>
      <h1 id="place-name-display">Načítání...</h1>
      <h2 id="place-location-display" style="margin-bottom: 5vw;"></h2>
      <img id="weather-icon-display" src="/icons/01d.png" alt="Počasí" style="height: 10vw; width: 10vw; object-fit: contain;">
      <div>
        <span id="temperature-display">--°C</span>
        <span id="condition-display">Načítání...</span>
      </div>
    </div>

    <div class="vl"></div>

    {/* Departures */}
    <div>
      <h1 id="current-date-display">Načítání...</h1>
      {/* Settings Icon Link */}
      <div class="settings">
        <a href="/goglance/settings" class="settings-link" aria-label="Settings">
          <svg class="settings-icon">
            <title>Settings</title>
            <path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.38a2 2 0 0 0-.73-2.73l-.15-.1a2 2 0 0 1-1-1.72v-.51a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"></path>
            <circle cx="12" cy="12" r="3"></circle>
          </svg>
        </a>
      </div>
      <h2 style="margin-bottom: 2.5vw;">Nejbližší odjezdy ze zastávky <b id="stop-name-display" style="color: white;">Načítání...</b></h2>
      <section id="departures-list-container">
          {/* Departures will be loaded here by JS */}
      </section>
    </div>

    {/* Weather Details */}
    <div>
      <WeatherCard/>
      {/* Ids for js changes:
      "feels-like-display" for feels-like temperature text
      "chmi-alert-container" for changing the bg and text color
      "chmi-alert-text" for alert text
      "chmi-alert-details" for alert detail
      */}
    </div>

    {/* Forecast */}
    <div>
      <h1 style="margin-bottom: 1vw; margin-top: 0.5vw;">Dnešní přehled</h1>
      <section>
        <div class="lower-cards">
          <WindCard/>
          {/* Ids for js changes:
          "wind-speed-display" for wind speed
          "Windchart" id of chart div
          "WindWalues" js var for chart data
          */}
          <UvCard/>
          {/*
          "uvIndexValue" and "humidityValue" js vars for chart data 
          "UVchart" and "Humiditychart" ids of charts
          */}
          <SunTimeCard/>
          {/* "sunrise-display" and "sunset-display" ids of sun times texts */}
        </div>
      </section>
    </div>
  </main>
</Layout>

<script define:vars={{ settingsKey }}>
    const SETTINGS_KEY = settingsKey;
    let currentSettings = null;

    // Get references to all elements with IDs added above
    const settingsPrompt = document.getElementById('settings-prompt');

    // Static Info Displays
    const placeNameDisplay = document.getElementById('place-name-display');
    const placeLocationDisplay = document.getElementById('place-location-display');
    const currentDateDisplay = document.getElementById('current-date-display');
    const stopNameDisplay = document.getElementById('stop-name-display');

    // Dynamic Weather Displays
    const weatherIconDisplay = document.getElementById('weather-icon-display');
    const temperatureDisplay = document.getElementById('temperature-display');
    const conditionDisplay = document.getElementById('condition-display');
    const feelsLikeDisplay = document.getElementById('feels-like-display');
    const windSpeedDisplay = document.getElementById('wind-speed-display');
    const sunriseDisplay = document.getElementById('sunrise-display');
    const sunsetDisplay = document.getElementById('sunset-display');

     // CHMI Alert Displays
    const chmiAlertContainer = document.getElementById('chmi-alert-container');
    const chmiAlertText = document.getElementById('chmi-alert-text');
    const chmiAlertDetails = document.getElementById('chmi-alert-details');

    // Departures List
    const departuresListContainer = document.getElementById('departures-list-container');

    // --- Icon Map (Client Side) ---
     const iconMap = {
        '01d': '/icons/01d.png',
        '02d': '/icons/02d.png',
        '03d': '/icons/03d.png',
        '04d': '/icons/04d.png',
        '09d': '/icons/09d.png',
        '10d': '/icons/10d.png',
        '11d': '/icons/11d.png',
        '13d': '/icons/13d.png',
        '50d': '/icons/50d.png',
        'unknown': '/icons/unknown.png',
    };

    // --- Load Settings & Initialize Function ---
    function loadSettingsAndInit() {
        console.log('Checking settings...');
        const storedSettings = localStorage.getItem(SETTINGS_KEY);
        let settings = null;

        if (storedSettings) {
            try {
                settings = JSON.parse(storedSettings);
            } catch (e) {
                console.error("Error parsing settings from localStorage", e);
                settings = null; // Treat as missing if parsing fails
            }
        }

        // Validate essential settings
        if (!settings.lat || !settings.lon || !settings.owmApiKey || !settings.mapyApiKey) {
             console.warn('Essential settings missing from localStorage.');
             if(mainContentArea) mainContentArea.style.display = 'none'; // Hide dashboard content
             if(settingsPrompt) settingsPrompt.style.display = 'block'; // Show prompt
             return; // Stop initialization
        }

        // Settings are valid!
        console.log('Settings loaded:', settings);
        currentSettings = settings; // Store globally in script scope
        if(settingsPrompt) settingsPrompt.style.display = 'none'; // Hide prompt
        if(mainContentArea) mainContentArea.style.display = ''; // Ensure dashboard content is visible (remove potential 'none')

        // Initial UI updates and data fetch
        updateStaticUI(currentSettings);
        fetchAndUpdateWeather(currentSettings);
        fetchAndUpdateDepartures(currentSettings);
        fetchAndUpdateCHMI(currentSettings);
        // fetchAndUpdateSensor(currentSettings); // If needed

        // Set up refresh intervals
         setInterval(() => fetchAndUpdateDepartures(currentSettings), 60 * 1000); // 1 min
         // setInterval(() => fetchAndUpdateSensor(currentSettings), 60 * 1000); // 1 min
         setInterval(() => {
             console.log('Performing hourly update...');
             fetchAndUpdateWeather(currentSettings);
             fetchAndUpdateCHMI(currentSettings);
             updateStaticUI(currentSettings); // Update date display too
         }, 60 * 60 * 1000); // 1 hour

    }

    // --- Update Static UI Function ---
    function updateStaticUI(settings) {
        console.log('Updating static UI...');
         if (placeNameDisplay) placeNameDisplay.textContent = settings.name || 'Místo'; // Use address as main title? Or a fixed title?
         if (placeLocationDisplay) placeLocationDisplay.textContent = settings.location || '';
         if (stopNameDisplay) stopNameDisplay.textContent = settings.stopId || 'N/A';
         if (currentDateDisplay) {
             currentDateDisplay.textContent = new Date().toLocaleDateString('cs-CZ', { weekday: 'long', year: 'numeric', month: 'numeric', day: 'numeric' });
         }
    }

    // --- Placeholder Fetching Functions (To be implemented next) ---
    async function fetchAndUpdateWeather(settings) {
        console.log('Fetching weather for:', settings.lat, settings.lon);
        // TODO: Implement OpenWeatherMap API call and DOM updates
        // Example structure:
        /*
        const apiKey = settings.owmApiKey;
        const url = `https://api.openweathermap.org/data/3.0/onecall?lat=${settings.lat}...&appid=${apiKey}...`;
        try {
            const response = await fetch(url);
            if (!response.ok) throw new Error(`OWM Error: ${response.status}`);
            const data = await response.json();
            // Update DOM elements (temperatureDisplay.textContent = ..., etc.)
             console.log('Weather Data:', data);
        } catch (error) {
            console.error('Failed to fetch weather:', error);
            // Update UI to show error state
        }
        */
         // TEMPORARY: Update some fields to show it's called
         if(temperatureDisplay) temperatureDisplay.textContent = '??°C';
         if(conditionDisplay) conditionDisplay.textContent = 'Načítání...';
    }

    async function fetchAndUpdateDepartures(settings) {
        console.log('Fetching departures for stop:', settings.stopId);
        // TODO: Implement Departures API call and dynamic list generation
         if(departuresListContainer) departuresListContainer.innerHTML = '<p style="color: #aaa; font-size: 0.9em;">Načítání odjezdů...</p>';
    }

    async function fetchAndUpdateCHMI(settings) {
        console.log('Fetching CHMI alerts');
        // TODO: Implement CHMI API call and alert display logic
         if(chmiAlertContainer) chmiAlertContainer.style.display = 'none'; // Hide initially
    }

    // --- Run Initialization on Load ---
    document.addEventListener('DOMContentLoaded', loadSettingsAndInit);

</script>

<style>
  /* General styling */
  h1 {
    font-size: 2vw;
    margin-bottom: 0px;
  }
  h2 {
    font-size: 1.5vw;
    margin-top: 0;
    color: #A7A7A7; font-weight: 400;
    margin-bottom: 0px;
  }

  /* Dashboard styling */
  .dashboard {
    display: grid;
    grid-template-columns: 1fr 0.001fr 2fr;
	  column-gap: 4vw;
    grid-column-gap: 4vw;
    row-gap: 0.5vw;
    grid-row-gap: 0.5vw;
    width: 92%;
	  overflow: hidden;
  }

  /* Main info styling */
  #weather-icon-display{
		max-width: 10vw;
    height: auto;
	}
  #condition-display{
    font-size: 1.5vw;
    margin: 0;
		color: #A7A7A7;
		margin-left: 4vw;
  }
  #temperature-display{
    font-size: 5vw;
		font-weight: 600;
		margin: 0;
  }

  /* Separator styling */
  .vl {
    border: 0.2vw solid #1b1a1d;
    border-radius: 5vw;
    grid-column: 2;
    grid-row-start: 1;
    grid-row-end: 3;
    overflow: hidden;
  }

  /* Styles for the settings icon container */
  .settings {
    position: absolute;
    top: 1.5vw;
    right: 1.5vw;
    background-color: #1b1a1d;
    padding: 0.8vw;
    border-radius: 0.7vw;
  }
  .settings-link {
     display: block;
     transition: transform 0.2s ease;
  }
  .settings-link:hover {
      transform: scale(1.1);
  }

  /* Styles for the SVG icon */
  .settings-icon {
      width: 1.5vw;
      height: 1.5vw;
      stroke: white;
      display: block;
  }

  /* Bus card style */
  #departures-list-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(10vw, 1fr)); /* Responsive columns */
    gap: 0.3vw;
  }

  .lower-cards{
    display: flex;
    justify-content: space-between;
    gap: 1vw;
  }
  
</style>